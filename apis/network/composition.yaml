apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: xnetworks.xp.sapns2.io
spec:
  writeConnectionSecretsToNamespace: crossplane-system
  compositeTypeRef:
    apiVersion: xp.sapns2.io/v1alpha1
    kind: XNetwork
  patchSets:
    # Make patch set for endpoints
    - name: network-general
      patches:
        - type: FromCompositeFieldPath
          fromFieldPath: spec.region
          toFieldPath: spec.forProvider.region
        - type: FromCompositeFieldPath
          fromFieldPath: spec.id
          toFieldPath: metadata.labels[networks.xp.sapns2.io/network-id]
  resources:
    ## VPC ## 0
    - base:
        apiVersion: ec2.aws.upbound.io/v1beta1
        kind: VPC
        spec:
          forProvider:
            cidrBlock: 10.121.0.0/16 #patch? # 100.64.0.0/16 will be added as an association to this vpc
            enableDnsSupport: true
            enableDnsHostnames: true
      name: eks-vpc
      patches:
        - type: PatchSet
          patchSetName: network-general
        - fromFieldPath: spec.id
          toFieldPath: spec.forProvider.tags.Name
        - fromFieldPath: spec.id
          toFieldPath: metadata.labels[vpc]
          transforms:
            - string:
                fmt: '%s-vpc'
              type: string
        - fromFieldPath: spec.id
          toFieldPath: spec.forProvider.tags.Name
    ## VPCIPv4CidrBlockAssociation 1
    - base:
        apiVersion: ec2.aws.upbound.io/v1beta1
        kind: VPCIPv4CidrBlockAssociation
        metadata:
          name: example
        spec:
          forProvider:
            cidrBlock: 100.64.0.0/16
            vpcIdSelector:
              matchControllerRef: true
      name: vpcCidrAssociation
      patches:
        - type: PatchSet
          patchSetName: network-general
        - fromFieldPath: spec.id
          toFieldPath: metadata.name
          transforms:
            - string:
                fmt: '%s-cidr-association'
              type: string
        - fromFieldPath: spec.id
          toFieldPath: spec.forProvider.vpcIdSelector.matchLabels[vpc]
          transforms:
            - string:
                fmt: '%s-vpc'
              type: string
    ## PEERING Connection 2
    - base:
        apiVersion: ec2.aws.upbound.io/v1beta1
        kind: VPCPeeringConnection
        spec:
          forProvider:
            autoAccept: true
            vpcId: vpc-04e889748fbf58d4d
            peerVpcIdSelector:
              matchControllerRef: true
      name: jumpPeeringConnection
      patches:
        - type: PatchSet
          patchSetName: network-general
        - fromFieldPath: spec.id
          toFieldPath: metadata.name
          transforms:
            - string:
                fmt: '%s-peering'
              type: string
        - fromFieldPath: spec.id
          toFieldPath: spec.forProvider.tags.Name
        - fromFieldPath: spec.id
          toFieldPath: spec.forProvider.peerVpcIdSelector.matchLabels[vpc]
          transforms:
            - string:
                fmt: '%s-vpc'
              type: string
    ## SUBNETS ##
    ## Private Subnets 3
    - base:
        apiVersion: ec2.aws.upbound.io/v1beta1
        kind: Subnet
        metadata:
          labels:
            zone: us-gov-west-1a
            access: private
            vpc-misc: endpoints
        spec:
          forProvider:
            cidrBlock: 10.121.1.0/24 #patch
            vpcIdSelector:
              matchControllerRef: true
            tags:
              kubernetes.io/role/internal-elb: "1"
      name: subnet-private-1a
      patches:
        - type: PatchSet
          patchSetName: network-general
        - fromFieldPath: spec.id
          toFieldPath: metadata.name
          transforms:
            - string:
                fmt: '%s-private-a'
              type: string
        - fromFieldPath: spec.region
          toFieldPath: spec.forProvider.availabilityZone
          transforms:
            - string:
                fmt: '%sa'
              type: string
        - fromFieldPath: spec.region
          toFieldPath: metadata.labels.zone
          transforms:
            - string:
                fmt: '%sa'
              type: string
        - fromFieldPath: spec.id
          toFieldPath: spec.forProvider.tags.Name
          transforms:
            - string:
                fmt: '%s-private-a'
              type: string
        - fromFieldPath: status.atProvider.id
          toFieldPath: status.endpointSubnets[]
          policy:
            mergeOptions:
              appendSlice: true
          type: ToCompositeFieldPath
    - base:
        apiVersion: ec2.aws.upbound.io/v1beta1
        kind: Subnet
        metadata:
          labels:
            zone: us-gov-west-1b
            access: private
        spec:
          forProvider:
            region: us-gov-west-1
            cidrBlock: 10.121.2.0/24 #patch
            vpcIdSelector:
              matchControllerRef: true
            tags:
              kubernetes.io/role/internal-elb: "1"
      name: subnet-private-1b
      patches:
        - type: PatchSet
          patchSetName: network-general
        - fromFieldPath: spec.id
          toFieldPath: metadata.name
          transforms:
            - string:
                fmt: '%s-private-b'
              type: string
        - fromFieldPath: spec.region
          toFieldPath: spec.forProvider.availabilityZone
          transforms:
            - string:
                fmt: '%sb'
              type: string
        - fromFieldPath: spec.region
          toFieldPath: metadata.labels.zone
          transforms:
            - string:
                fmt: '%sb'
              type: string
        - fromFieldPath: spec.id
          toFieldPath: spec.forProvider.tags.Name
          transforms:
            - string:
                fmt: '%s-private-b'
              type: string
        - fromFieldPath: status.atProvider.id
          toFieldPath: status.endpointSubnets
          policy:
            mergeOptions:
              appendSlice: true
          type: ToCompositeFieldPath
    - base:
        apiVersion: ec2.aws.upbound.io/v1beta1
        kind: Subnet
        metadata:
          labels:
            zone: us-gov-west-1c
            access: private
        spec:
          forProvider:
            region: us-gov-west-1
            cidrBlock: 10.121.3.0/24 #patch
            vpcIdSelector:
              matchControllerRef: true
            tags:
              kubernetes.io/role/internal-elb: "1"
      name: subnet-private-1c
      patches:
        - type: PatchSet
          patchSetName: network-general
        - fromFieldPath: spec.id
          toFieldPath: metadata.name
          transforms:
            - string:
                fmt: '%s-private-c'
              type: string
        - fromFieldPath: spec.region
          toFieldPath: spec.forProvider.availabilityZone
          transforms:
            - string:
                fmt: '%sc'
              type: string
        - fromFieldPath: spec.region
          toFieldPath: metadata.labels.zone
          transforms:
            - string:
                fmt: '%sc'
              type: string
        - fromFieldPath: spec.id
          toFieldPath: spec.forProvider.tags.Name
          transforms:
            - string:
                fmt: '%s-private-c'
              type: string
        - fromFieldPath: status.atProvider.id
          toFieldPath: status.endpointSubnets
          policy:
            mergeOptions:
              appendSlice: true
          type: ToCompositeFieldPath
    ## IntraSubnets
    - base:
        apiVersion: ec2.aws.upbound.io/v1beta1
        kind: Subnet
        metadata:
          labels:
            zone: us-gov-west-1a
            access: intra
        spec:
          forProvider:
            cidrBlock: 100.64.1.0/24 #patch
            vpcIdSelector:
              matchControllerRef: true
            #tags:
            #  kubernetes.io/role/internal-elb: "1"
      name: subnet-intra-1a
      patches:
        - type: PatchSet
          patchSetName: network-general
        - fromFieldPath: spec.id
          toFieldPath: metadata.name
          transforms:
            - string:
                fmt: '%s-intra-a'
              type: string
        - fromFieldPath: spec.region
          toFieldPath: spec.forProvider.availabilityZone
          transforms:
            - string:
                fmt: '%sa'
              type: string
        - fromFieldPath: spec.region
          toFieldPath: metadata.labels.zone
          transforms:
            - string:
                fmt: '%sa'
              type: string
        - fromFieldPath: spec.id
          toFieldPath: spec.forProvider.tags.Name
          transforms:
            - string:
                fmt: '%s-intra-a'
              type: string
    - base:
        apiVersion: ec2.aws.upbound.io/v1beta1
        kind: Subnet
        metadata:
          labels:
            zone: us-gov-west-1b
            access: intra
        spec:
          forProvider:
            region: us-gov-west-1
            cidrBlock: 100.64.2.0/24 #patch
            vpcIdSelector:
              matchControllerRef: true
            #tags:
            #  kubernetes.io/role/internal-elb: "1"
      name: subnet-intra-1b
      patches:
        - type: PatchSet
          patchSetName: network-general
        - fromFieldPath: spec.id
          toFieldPath: metadata.name
          transforms:
            - string:
                fmt: '%s-intra-b'
              type: string
        - fromFieldPath: spec.region
          toFieldPath: spec.forProvider.availabilityZone
          transforms:
            - string:
                fmt: '%sb'
              type: string
        - fromFieldPath: spec.region
          toFieldPath: metadata.labels.zone
          transforms:
            - string:
                fmt: '%sb'
              type: string
        - fromFieldPath: spec.id
          toFieldPath: spec.forProvider.tags.Name
          transforms:
            - string:
                fmt: '%s-intra-b'
              type: string
    - base:
        apiVersion: ec2.aws.upbound.io/v1beta1
        kind: Subnet
        metadata:
          labels:
            zone: us-gov-west-1c
            access: intra
        spec:
          forProvider:
            region: us-gov-west-1
            cidrBlock: 100.64.3.0/24 #patch
            vpcIdSelector:
              matchControllerRef: true
            #tags:
            #  kubernetes.io/role/internal-elb: "1"
      name: subnet-intra-1c
      patches:
        - type: PatchSet
          patchSetName: network-general
        - fromFieldPath: spec.id
          toFieldPath: metadata.name
          transforms:
            - string:
                fmt: '%s-intra-c'
              type: string
        - fromFieldPath: spec.region
          toFieldPath: spec.forProvider.availabilityZone
          transforms:
            - string:
                fmt: '%sc'
              type: string
        - fromFieldPath: spec.region
          toFieldPath: metadata.labels.zone
          transforms:
            - string:
                fmt: '%sc'
              type: string
        - fromFieldPath: spec.id
          toFieldPath: spec.forProvider.tags.Name
          transforms:
            - string:
                fmt: '%s-intra-c'
              type: string
    ## ROUTETABLE - Private
    - base:
        apiVersion: ec2.aws.upbound.io/v1beta1
        kind: RouteTable
        spec:
          forProvider:
            vpcIdSelector:
              matchControllerRef: true
      name: routeTable-private
      patches:
        - fromFieldPath: spec.id
          toFieldPath: spec.forProvider.vpcIdSelector.matchLabels[networks.xp.sapns2.io/network-id]
        - type: PatchSet
          patchSetName: network-general
        - fromFieldPath: spec.id
          toFieldPath: metadata.name
          transforms:
            - string:
                fmt: '%s-routetable-private'
              type: string
        - fromFieldPath: spec.id
          toFieldPath: spec.forProvider.tags.Name
          transforms:
            - string:
                fmt: '%s-private'
              type: string
    - base:
        apiVersion: ec2.aws.upbound.io/v1beta1
        kind: RouteTableAssociation
        spec:
          forProvider:
            routeTableIdSelector:
              matchControllerRef: true
            subnetIdSelector:
              matchControllerRef: true
              matchLabels:
                access: private
      name: routetableAssociation-private-a
      patches:
        - fromFieldPath: spec.region
          toFieldPath: spec.forProvider.subnetIdSelector.matchLabels.zone
          transforms:
            - string:
                fmt: '%sa'
              type: string
        - fromFieldPath: spec.id
          toFieldPath: spec.forProvider.routeTableIdRef.name
          transforms:
            - string:
                fmt: '%s-routetable-private'
              type: string
        - fromFieldPath: spec.id
          toFieldPath: metadata.name
          transforms:
            - string:
                fmt: '%s-rta-private-a'
              type: string
        - patchSetName: network-general
          type: PatchSet
    - base:
        apiVersion: ec2.aws.upbound.io/v1beta1
        kind: RouteTableAssociation
        spec:
          forProvider:
            routeTableIdSelector:
              matchControllerRef: true
            subnetIdSelector:
              matchControllerRef: true
              matchLabels:
                access: private
      name: routetableAssociation-private-b
      patches:
        - fromFieldPath: spec.region
          toFieldPath: spec.forProvider.subnetIdSelector.matchLabels.zone
          transforms:
            - string:
                fmt: '%sb'
              type: string
        - fromFieldPath: spec.id
          toFieldPath: spec.forProvider.routeTableIdRef.name
          transforms:
            - string:
                fmt: '%s-routetable-private'
              type: string
        - fromFieldPath: spec.id
          toFieldPath: metadata.name
          transforms:
            - string:
                fmt: '%s-rta-private-b'
              type: string
        - patchSetName: network-general
          type: PatchSet
    - base:
        apiVersion: ec2.aws.upbound.io/v1beta1
        kind: RouteTableAssociation
        spec:
          forProvider:
            routeTableIdSelector:
              matchControllerRef: true
            subnetIdSelector:
              matchControllerRef: true
              matchLabels:
                access: private
      name: routetableAssociation-private-c
      patches:
        - fromFieldPath: spec.region
          toFieldPath: spec.forProvider.subnetIdSelector.matchLabels.zone
          transforms:
            - string:
                fmt: '%sc'
              type: string
        - fromFieldPath: spec.id
          toFieldPath: spec.forProvider.routeTableIdRef.name
          transforms:
            - string:
                fmt: '%s-routetable-private'
              type: string
        - fromFieldPath: spec.id
          toFieldPath: metadata.name
          transforms:
            - string:
                fmt: '%s-rta-private-c'
              type: string
        - patchSetName: network-general
          type: PatchSet
    - base:
        apiVersion: ec2.aws.upbound.io/v1beta2
        kind: Route
        spec:
          forProvider:
            destinationCidrBlock: 192.168.0.0/16
      name: routePeeringConnection-private
      patches:
        - patchSetName: network-general
          type: PatchSet
        - fromFieldPath: spec.id
          toFieldPath: metadata.name
          transforms:
            - string:
                fmt: '%s-peer-route'
              type: string
        - fromFieldPath: spec.id
          toFieldPath: spec.forProvider.routeTableIdRef.name
          transforms:
            - string:
                fmt: '%s-routetable-private'
              type: string
        - fromFieldPath: spec.id
          toFieldPath: spec.forProvider.vpcPeeringConnectionIdRef.name
          transforms:
            - string:
                fmt: '%s-peering'
              type: string
    - base:
        apiVersion: ec2.aws.upbound.io/v1beta2
        kind: Route
        spec:
          forProvider:
            destinationCidrBlock: 192.168.0.0/16
      name: routePeeringConnection-intra
      patches:
        - patchSetName: network-general
          type: PatchSet
        - fromFieldPath: spec.id
          toFieldPath: metadata.name
          transforms:
            - string:
                fmt: '%s-peer-route-intra'
              type: string
        - fromFieldPath: spec.id
          toFieldPath: spec.forProvider.routeTableIdRef.name
          transforms:
            - string:
                fmt: '%s-routetable-intra'
              type: string
        - fromFieldPath: spec.id
          toFieldPath: spec.forProvider.vpcPeeringConnectionIdRef.name
          transforms:
            - string:
                fmt: '%s-peering'
              type: string
    ## ROUTETABLE - Intra
    - base:
        apiVersion: ec2.aws.upbound.io/v1beta1
        kind: RouteTable
        spec:
          forProvider:
            vpcIdSelector:
              matchControllerRef: true
      name: routeTable-Intra
      patches:
        - fromFieldPath: spec.id
          toFieldPath: spec.forProvider.vpcIdSelector.matchLabels[networks.xp.sapns2.io/network-id]
        - type: PatchSet
          patchSetName: network-general
        - fromFieldPath: spec.id
          toFieldPath: metadata.name
          transforms:
            - string:
                fmt: '%s-routetable-intra'
              type: string
        - fromFieldPath: spec.id
          toFieldPath: spec.forProvider.tags.Name
          transforms:
            - string:
                fmt: '%s-intra'
              type: string
    - base:
        apiVersion: ec2.aws.upbound.io/v1beta1
        kind: RouteTableAssociation
        spec:
          forProvider:
            routeTableIdSelector:
              matchControllerRef: true
            subnetIdSelector:
              matchControllerRef: true
              matchLabels:
                access: intra
      name: routetableAssociation-intra-a
      patches:
        - fromFieldPath: spec.region
          toFieldPath: spec.forProvider.subnetIdSelector.matchLabels.zone
          transforms:
            - string:
                fmt: '%sa'
              type: string
        - fromFieldPath: spec.id
          toFieldPath: spec.forProvider.routeTableIdRef.name
          transforms:
            - string:
                fmt: '%s-routetable-intra'
              type: string
        - fromFieldPath: spec.id
          toFieldPath: metadata.name
          transforms:
            - string:
                fmt: '%s-rta-intra-a'
              type: string
        - patchSetName: network-general
          type: PatchSet
    - base:
        apiVersion: ec2.aws.upbound.io/v1beta1
        kind: RouteTableAssociation
        spec:
          forProvider:
            routeTableIdSelector:
              matchControllerRef: true
            subnetIdSelector:
              matchControllerRef: true
              matchLabels:
                access: intra
      name: routetableAssociation-intra-b
      patches:
        - fromFieldPath: spec.region
          toFieldPath: spec.forProvider.subnetIdSelector.matchLabels.zone
          transforms:
            - string:
                fmt: '%sb'
              type: string
        - fromFieldPath: spec.id
          toFieldPath: spec.forProvider.routeTableIdRef.name
          transforms:
            - string:
                fmt: '%s-routetable-intra'
              type: string
        - fromFieldPath: spec.id
          toFieldPath: metadata.name
          transforms:
            - string:
                fmt: '%s-rta-intra-b'
              type: string
        - patchSetName: network-general
          type: PatchSet
    - base:
        apiVersion: ec2.aws.upbound.io/v1beta1
        kind: RouteTableAssociation
        spec:
          forProvider:
            routeTableIdSelector:
              matchControllerRef: true
            subnetIdSelector:
              matchControllerRef: true
              matchLabels:
                access: intra
      name: routetableAssociation-intra-c
      patches:
        - fromFieldPath: spec.region
          toFieldPath: spec.forProvider.subnetIdSelector.matchLabels.zone
          transforms:
            - string:
                fmt: '%sc'
              type: string
        - fromFieldPath: spec.id
          toFieldPath: spec.forProvider.routeTableIdRef.name
          transforms:
            - string:
                fmt: '%s-routetable-intra'
              type: string
        - fromFieldPath: spec.id
          toFieldPath: metadata.name
          transforms:
            - string:
                fmt: '%s-rta-intra-c'
              type: string
        - patchSetName: network-general
          type: PatchSet
    ## SECURITY GROUP ##
    - base:
        apiVersion: ec2.aws.upbound.io/v1beta1
        kind: SecurityGroup
        spec:
          forProvider:
            description: Security group for endpoints
      name: endpointSecurityGroup
      patches:
        - fromFieldPath: spec.id
          toFieldPath: spec.forProvider.vpcIdSelector.matchLabels[vpc]
          transforms:
            - string:
                fmt: '%s-vpc'
              type: string
        - patchSetName: network-general
          type: PatchSet
        - fromFieldPath: spec.id
          toFieldPath: metadata.name
          transforms:
            - string:
                fmt: '%s-sec-group'
              type: string
        - fromFieldPath: spec.id
          toFieldPath: spec.forProvider.name
          transforms:
            - string:
                fmt: '%s-sec-group'
              type: string
        - fromFieldPath: spec.id
          toFieldPath: metadata.labels[securitygroup]
          transforms:
            - string:
                fmt: '%s-sec-group'
              type: string
        - fromFieldPath: spec.id
          toFieldPath: spec.forProvider.tags.Name
    ## Endpoint SecurityGroupRule
    - base:
        apiVersion: ec2.aws.upbound.io/v1beta1
        kind: SecurityGroupRule
        spec:
          forProvider:
            cidrBlocks:
              - 10.121.0.0/16
              - 100.64.0.0/16
              - 192.168.0.0/16 # CIDR block where jump host is ... also need to setup peering connection
            description: Allow inbound
            toPort: 443
            fromPort: 443
            protocol: tcp
            securityGroupIdSelector:
              matchControllerRef: true
            type: ingress
      name: endpointSecurityGroupRuleIngress
      patches:
        - patchSetName: network-general
          type: PatchSet
        - fromFieldPath: spec.id
          toFieldPath: spec.forProvider.securityGroupIdSelector.matchLabels[securitygroup]
          transforms:
            - string:
                fmt: '%s-sec-group'
              type: string
        - fromFieldPath: spec.id
          toFieldPath: metadata.name
          transforms:
            - string:
                fmt: '%s-sg-rule-endpoint-ingress'
              type: string
    ## ENDPOINTS ##
    ## VPCEndpoint - s3
    - base:
        apiVersion: ec2.aws.upbound.io/v1beta1
        kind: VPCEndpoint
        spec:
          forProvider:
            serviceName: com.amazonaws.us-gov-west-1.s3
            vpcEndpointType: Gateway
      name: s3Endpoint
      patches:
        - fromFieldPath: spec.id
          toFieldPath: spec.forProvider.vpcIdSelector.matchLabels[vpc]
          transforms:
            - string:
                fmt: '%s-vpc'
              type: string
        - fromFieldPath: spec.id
          toFieldPath: metadata.name
          transforms:
            - string:
                fmt: '%s-s3-endpoint'
              type: string
        - patchSetName: network-general
          type: PatchSet
        - fromFieldPath: spec.id
          toFieldPath: spec.forProvider.tags.Name
          transforms:
            - string:
                fmt: '%s-s3-endpoint'
              type: string
    ## VPCEndpointRouteTableAssociation - s3 - private
    - base:
        apiVersion: ec2.aws.upbound.io/v1beta1
        kind: VPCEndpointRouteTableAssociation
      name: s3Endpoint-rta-private
      patches:
        - fromFieldPath: spec.id
          toFieldPath: spec.forProvider.routeTableIdRef.name
          transforms:
            - string:
                fmt: '%s-routetable-private'
              type: string
        - fromFieldPath: spec.id
          toFieldPath: spec.forProvider.vpcEndpointIdRef.name
          transforms:
            - string:
                fmt: '%s-s3-endpoint'
              type: string
        - fromFieldPath: spec.id
          toFieldPath: metadata.name
          transforms:
            - string:
                fmt: '%s-s3-endpoint-rta-private'
              type: string
        - patchSetName: network-general
          type: PatchSet
    ## VPCEndpointRouteTableAssociation - s3 - intra
    - base:
        apiVersion: ec2.aws.upbound.io/v1beta1
        kind: VPCEndpointRouteTableAssociation
      name: s3Endpoint-rta-intra
      patches:
        - fromFieldPath: spec.id
          toFieldPath: spec.forProvider.routeTableIdRef.name
          transforms:
            - string:
                fmt: '%s-routetable-intra'
              type: string
        - fromFieldPath: spec.id
          toFieldPath: spec.forProvider.vpcEndpointIdRef.name
          transforms:
            - string:
                fmt: '%s-s3-endpoint'
              type: string
        - fromFieldPath: spec.id
          toFieldPath: metadata.name
          transforms:
            - string:
                fmt: '%s-s3-endpoint-rta-intra'
              type: string
        - patchSetName: network-general
          type: PatchSet
    ## VPCEndPoint - EC2
    - base:
        apiVersion: ec2.aws.upbound.io/v1beta1
        kind: VPCEndpoint
        spec:
          forProvider:
            privateDnsEnabled: true
            serviceName: com.amazonaws.us-gov-west-1.ec2
            vpcEndpointType: Interface
            #subnetConfiguration:
            #  - subnetIdSelector:
            #      matchControllerRef: true
            #      matchLabels:
            #        access: private
      name: ec2Endpoint
      patches:
        - fromFieldPath: status.endpointSubnets
          toFieldPath: spec.forProvider.subnetIds
          policy:
            mergeOptions:
              appendSlice: true
            fromFieldPath: Required
        - fromFieldPath: spec.id
          toFieldPath: spec.forProvider.vpcIdSelector.matchLabels[vpc]
          transforms:
            - string:
                fmt: '%s-vpc'
              type: string
        - fromFieldPath: spec.id
          toFieldPath: metadata.name
          transforms:
            - string:
                fmt: '%s-ec2-endpoint'
              type: string
        - patchSetName: network-general
          type: PatchSet
        - fromFieldPath: spec.id
          toFieldPath: spec.forProvider.tags.Name
          transforms:
            - string:
                fmt: '%s-ec2-endpoint'
              type: string
    ## EndPointSubnetAccociation - ec2 - private
    #- base:
    #    apiVersion: ec2.aws.upbound.io/v1beta1
    #    kind: VPCEndpointSubnetAssociation
    #    spec:
    #      forProvider:
    #        subnetIdSelector:
    #          matchControllerRef: true
    #          #matchLabels:
    #          #  access: private
    #  name: ec2Endpoint-sna
    #  patches:
    #    - fromFieldPath: spec.id
    #      toFieldPath: spec.forProvider.subnetIdSelector.matchLabels[networks.xp.sapns2.io/network-id]
    #    - fromFieldPath: spec.id
    #      toFieldPath: spec.forProvider.vpcEndpointIdRef.name
    #      transforms:
    #        - string:
    #            fmt: '%s-ec2-endpoint'
    #          type: string
    #    - fromFieldPath: spec.id
    #      toFieldPath: metadata.name
    #      transforms:
    #        - string:
    #            fmt: '%s-ec2-endpoint-rta'
    #          type: string
    #    - patchSetName: network-general
    #      type: PatchSet
    ## VPCEndpointSecurityGroupAssociation - ec2
    - base:
        apiVersion: ec2.aws.upbound.io/v1beta1
        kind: VPCEndpointSecurityGroupAssociation
      name: ec2sec-group
      patches:
        - fromFieldPath: spec.id
          toFieldPath: spec.forProvider.vpcEndpointIdRef.name
          transforms:
            - string:
                fmt: '%s-ec2-endpoint'
              type: string
        - fromFieldPath: spec.id
          toFieldPath: spec.forProvider.securityGroupIdRef.name
          transforms:
            - string:
                fmt: '%s-sec-group'
              type: string
        - fromFieldPath: spec.id
          toFieldPath: metadata.name
          transforms:
            - string:
                fmt: '%s-ec2-sec-group'
              type: string
        - patchSetName: network-general
          type: PatchSet
    ## VPCEndpoint - ecrDkrEndpoint
    - base:
        apiVersion: ec2.aws.upbound.io/v1beta1
        kind: VPCEndpoint
        spec:
          forProvider:
            privateDnsEnabled: true
            serviceName: com.amazonaws.us-gov-west-1.ecr.dkr
            vpcEndpointType: Interface
      name: ecrDkrEndpoint
      patches:
        - fromFieldPath: spec.id
          toFieldPath: spec.forProvider.vpcIdSelector.matchLabels[vpc]
          transforms:
            - string:
                fmt: '%s-vpc'
              type: string
        - fromFieldPath: spec.id
          toFieldPath: metadata.name
          transforms:
            - string:
                fmt: '%s-ecr-dkr-endpoint'
              type: string
        - patchSetName: network-general
          type: PatchSet
        - fromFieldPath: spec.id
          toFieldPath: spec.forProvider.tags.Name
          transforms:
            - string:
                fmt: '%s-ecr-dkr-endpoint'
              type: string
    ## VPCEndpointSubnetAssociation - ecrDkrEndpoint
    - base:
        apiVersion: ec2.aws.upbound.io/v1beta1
        kind: VPCEndpointSubnetAssociation
        spec:
          forProvider:
            subnetIdSelector:
              matchControllerRef: true
              matchLabels:
                access: private
      name: ecrDkrEndpoint-rta
      patches:
        - fromFieldPath: spec.id
          toFieldPath: spec.forProvider.subnetIdSelector.matchLabels[networks.xp.sapns2.io/network-id]
        - fromFieldPath: spec.id
          toFieldPath: spec.forProvider.vpcEndpointIdRef.name
          transforms:
            - string:
                fmt: '%s-ecr-dkr-endpoint'
              type: string
        - fromFieldPath: spec.id
          toFieldPath: metadata.name
          transforms:
            - string:
                fmt: '%s-ecr-dkr-endpoint-sna'
              type: string
        - patchSetName: network-general
          type: PatchSet
    ## VPCEndpointSecurityGroupAssociation - ecrDkrEndpoint
    - base:
        apiVersion: ec2.aws.upbound.io/v1beta1
        kind: VPCEndpointSecurityGroupAssociation
      name: ecrDkrsec-group
      patches:
        - fromFieldPath: spec.id
          toFieldPath: spec.forProvider.vpcEndpointIdRef.name
          transforms:
            - string:
                fmt: '%s-ecr-dkr-endpoint'
              type: string
        - fromFieldPath: spec.id
          toFieldPath: spec.forProvider.securityGroupIdRef.name
          transforms:
            - string:
                fmt: '%s-sec-group'
              type: string
        - fromFieldPath: spec.id
          toFieldPath: metadata.name
          transforms:
            - string:
                fmt: '%s-ecr-dkr-sec-group'
              type: string
        - patchSetName: network-general
          type: PatchSet
    ## VPCEndpoint - ecrApiEndpoint
    - base:
        apiVersion: ec2.aws.upbound.io/v1beta1
        kind: VPCEndpoint
        spec:
          forProvider:
            privateDnsEnabled: true
            serviceName: com.amazonaws.us-gov-west-1.ecr.api
            vpcEndpointType: Interface
      name: ecrApiEndpoint
      patches:
        - fromFieldPath: spec.id
          toFieldPath: spec.forProvider.vpcIdSelector.matchLabels[vpc]
          transforms:
            - string:
                fmt: '%s-vpc'
              type: string
        - fromFieldPath: spec.id
          toFieldPath: metadata.name
          transforms:
            - string:
                fmt: '%s-ecr-api-endpoint'
              type: string
        - patchSetName: network-general
          type: PatchSet
        - fromFieldPath: spec.id
          toFieldPath: spec.forProvider.tags.Name
          transforms:
            - string:
                fmt: '%s-ecr-api-endpoint'
              type: string
    ## VPCEndpointSubnetAssociation - ecrApiEndpoint
    - base:
        apiVersion: ec2.aws.upbound.io/v1beta1
        kind: VPCEndpointSubnetAssociation
        spec:
          forProvider:
            subnetIdSelector:
              matchControllerRef: true
              matchLabels:
                access: private
      name: ecrApiEndpoint-sna
      patches:
        - fromFieldPath: spec.id
          toFieldPath: spec.forProvider.subnetIdSelector.matchLabels[networks.xp.sapns2.io/network-id]
        - fromFieldPath: spec.id
          toFieldPath: spec.forProvider.vpcEndpointIdRef.name
          transforms:
            - string:
                fmt: '%s-ecr-api-endpoint'
              type: string
        - fromFieldPath: spec.id
          toFieldPath: metadata.name
          transforms:
            - string:
                fmt: '%s-ecr-api-endpoint-sna'
              type: string
        - patchSetName: network-general
          type: PatchSet
    ## VPCEndpointSecurityGroupAssociation - ecrApiEndpoint
    - base:
        apiVersion: ec2.aws.upbound.io/v1beta1
        kind: VPCEndpointSecurityGroupAssociation
      name: ecrApisec-group
      patches:
        - fromFieldPath: spec.id
          toFieldPath: spec.forProvider.vpcEndpointIdRef.name
          transforms:
            - string:
                fmt: '%s-ecr-api-endpoint'
              type: string
        - fromFieldPath: spec.id
          toFieldPath: spec.forProvider.securityGroupIdRef.name
          transforms:
            - string:
                fmt: '%s-sec-group'
              type: string
        - fromFieldPath: spec.id
          toFieldPath: metadata.name
          transforms:
            - string:
                fmt: '%s-ecr-api-sec-group'
              type: string
        - patchSetName: network-general
          type: PatchSet
    ## VPCEndpoint - stsEndpoint
    - base:
        apiVersion: ec2.aws.upbound.io/v1beta1
        kind: VPCEndpoint
        spec:
          forProvider:
            privateDnsEnabled: true
            serviceName: com.amazonaws.us-gov-west-1.sts
            vpcEndpointType: Interface
      name: stsEndpoint
      patches:
        - fromFieldPath: spec.id
          toFieldPath: spec.forProvider.vpcIdSelector.matchLabels[vpc]
          transforms:
            - string:
                fmt: '%s-vpc'
              type: string
        - fromFieldPath: spec.id
          toFieldPath: metadata.name
          transforms:
            - string:
                fmt: '%s-sts-endpoint'
              type: string
        - patchSetName: network-general
          type: PatchSet
        - fromFieldPath: spec.id
          toFieldPath: spec.forProvider.tags.Name
          transforms:
            - string:
                fmt: '%s-sts-endpoint'
              type: string
    ## VPCEndpointSecurityGroupAssociation - stsEndpoint
    - base:
        apiVersion: ec2.aws.upbound.io/v1beta1
        kind: VPCEndpointSecurityGroupAssociation
      name: stssec-group
      patches:
        - fromFieldPath: spec.id
          toFieldPath: spec.forProvider.vpcEndpointIdRef.name
          transforms:
            - string:
                fmt: '%s-sts-endpoint'
              type: string
        - fromFieldPath: spec.id
          toFieldPath: spec.forProvider.securityGroupIdRef.name
          transforms:
            - string:
                fmt: '%s-sec-group'
              type: string
        - fromFieldPath: spec.id
          toFieldPath: metadata.name
          transforms:
            - string:
                fmt: '%s-sts-sec-group'
              type: string
        - patchSetName: network-general
          type: PatchSet
    ## VPCEndpointSubnetAssociation - sts
    - base:
        apiVersion: ec2.aws.upbound.io/v1beta1
        kind: VPCEndpointSubnetAssociation
        spec:
          forProvider:
            subnetIdSelector:
              matchControllerRef: true
              matchLabels:
                access: private
      name: stsEndpoint-sna
      patches:
        - fromFieldPath: spec.id
          toFieldPath: spec.forProvider.subnetIdSelector.matchLabels[networks.xp.sapns2.io/network-id]
        - fromFieldPath: spec.id
          toFieldPath: spec.forProvider.vpcEndpointIdRef.name
          transforms:
            - string:
                fmt: '%s-sts-endpoint'
              type: string
        - fromFieldPath: spec.id
          toFieldPath: metadata.name
          transforms:
            - string:
                fmt: '%s-sts-endpoint-sna'
              type: string
        - patchSetName: network-general
          type: PatchSet
    ## VPCEndpoint - logsEndpoint
    - base:
        apiVersion: ec2.aws.upbound.io/v1beta1
        kind: VPCEndpoint
        spec:
          forProvider:
            privateDnsEnabled: true
            serviceName: com.amazonaws.us-gov-west-1.logs
            vpcEndpointType: Interface
      name: logsEndpoint
      patches:
        - fromFieldPath: spec.id
          toFieldPath: spec.forProvider.vpcIdSelector.matchLabels[vpc]
          transforms:
            - string:
                fmt: '%s-vpc'
              type: string
        - fromFieldPath: spec.id
          toFieldPath: metadata.name
          transforms:
            - string:
                fmt: '%s-logs-endpoint'
              type: string
        - patchSetName: network-general
          type: PatchSet
        - fromFieldPath: spec.id
          toFieldPath: spec.forProvider.tags.Name
          transforms:
            - string:
                fmt: '%s-logs-endpoint'
              type: string
    ## VPCEndpointSubnetAssociation - logsEndpoint
    - base:
        apiVersion: ec2.aws.upbound.io/v1beta1
        kind: VPCEndpointSubnetAssociation
        spec:
          forProvider:
            subnetIdSelector:
              matchControllerRef: true
              matchLabels:
                access: private
      name: logsEndpoint-sna
      patches:
        - fromFieldPath: spec.id
          toFieldPath: spec.forProvider.subnetIdSelector.matchLabels[networks.xp.sapns2.io/network-id]
        - fromFieldPath: spec.id
          toFieldPath: spec.forProvider.vpcEndpointIdRef.name
          transforms:
            - string:
                fmt: '%s-logs-endpoint'
              type: string
        - fromFieldPath: spec.id
          toFieldPath: metadata.name
          transforms:
            - string:
                fmt: '%s-logs-endpoint-sna'
              type: string
        - patchSetName: network-general
          type: PatchSet
    ## VPCEndpointSecurityGroupAssociation - logsEndpoint
    - base:
        apiVersion: ec2.aws.upbound.io/v1beta1
        kind: VPCEndpointSecurityGroupAssociation
      name: logssec-group
      patches:
        - fromFieldPath: spec.id
          toFieldPath: spec.forProvider.vpcEndpointIdRef.name
          transforms:
            - string:
                fmt: '%s-logs-endpoint'
              type: string
        - fromFieldPath: spec.id
          toFieldPath: spec.forProvider.securityGroupIdRef.name
          transforms:
            - string:
                fmt: '%s-sec-group'
              type: string
        - fromFieldPath: spec.id
          toFieldPath: metadata.name
          transforms:
            - string:
                fmt: '%s-logs-sec-group'
              type: string
        - patchSetName: network-general
          type: PatchSet